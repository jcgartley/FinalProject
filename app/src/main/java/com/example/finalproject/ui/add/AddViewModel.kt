package com.example.finalproject.ui.add

import android.content.ContentValues
import android.util.Log
import androidx.lifecycle.*
import com.example.finalproject.R
import kotlinx.coroutines.launch
import com.example.finalproject.database.DatabaseRepository
import com.example.finalproject.database.BookEntity
import com.example.finalproject.ui.list.BookSummaryService
import com.example.finalproject.ui.list.SummaryData
import kotlinx.coroutines.flow.Flow
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory

class AddViewModel (private val repository: DatabaseRepository) : ViewModel() {

    val allBooks: LiveData<List<BookEntity>> = repository.getAllBooks().asLiveData()
    val unread: LiveData<List<BookEntity>> = repository.getUnread().asLiveData()

    val SUMMARY_URL = "https://en.wikipedia.org/api/rest_v1/page/summary/"
    val noSum = "Summary cannot be autogenerated at this time"

    fun getBook(title: String): BookEntity {
        return repository.getBook(title)
    }
    fun searchTitle(title: String): Flow<List<BookEntity>> {
        return repository.byTitle(title)
    }
    fun searchAuthor(author: String): Flow<List<BookEntity>> {
        return repository.byAuthor(author)
    }
    fun searchGenre(genre: String): Flow<List<BookEntity>> {
        return repository.searchGenre(genre)
    }
    private fun insertBook(book: BookEntity) = viewModelScope.launch {
        repository.insertBook(book)
    }
    private fun updateBook(book: BookEntity) = viewModelScope.launch {
        repository.updateBook(book)
    }
    fun markRead(book: BookEntity) = viewModelScope.launch {
        repository.markRead(book)
    }
    fun markUnread(book: BookEntity) = viewModelScope.launch {
        repository.markUnread(book)
    }

    private fun getNewBook(title : String,
                           author : String,
                           genre1 : String,
                           genre2 : String): BookEntity {
        val summary = getSummary(title)
        return BookEntity(
            title = title,
            author = author,
            genre1 = genre1,
            genre2 = genre2,
            summary = summary,
            read = false
        )
    }
    fun addNewBook(title : String,
                   author : String,
                   genre1 : String,
                   genre2 : String) {
        val newBook = getNewBook(title, author, genre1, genre2)
        insertBook(newBook)
    }
    fun updateBook(title : String,
                   author : String,
                   genre1 : String,
                   genre2 : String) {
        val newBook = getNewBook(title, author, genre1, genre2)
        //will never change summary
        updateBook(newBook)
    }
    fun deleteBook(book: BookEntity) = viewModelScope.launch {
        repository.deleteBook(book)
    }

    private fun getSummary(title: String): String {

//        val retrofit = Retrofit.Builder()
//            .baseUrl(R.string.summaryAPICall.toString())
//            .addConverterFactory(GsonConverterFactory.create())
//            .build()
//        val summaryAPI = retrofit.create(BookSummaryService::class.java)
//        var summary = R.string.noSum.toString()
//        summaryAPI.getSummary(title.replace(" ", "_")).enqueue(object: Callback<SummaryData> {
//
//            override fun onFailure(call: Call<SummaryData>, t: Throwable) {
//                Log.d(ContentValues.TAG, "onFailure : $t")
//            }
//
//            override fun onResponse(call: Call<SummaryData>, response: Response<SummaryData>) {
//                Log.d(ContentValues.TAG, "onResponse: $response")
//
//                val body = response.body()
//                if (body == null) {
//                    Log.w(ContentValues.TAG, "Valid response was not received")
//                    return
//                }
//                Log.w(ContentValues.TAG, "Valid response was received")
//                summary = body.extract
//            }
//        })

        return noSum
    }


}

class AddViewModelFactory(private val repository: DatabaseRepository) : ViewModelProvider.Factory {
    override fun <T : ViewModel> create(modelClass: Class<T>): T {
        if (modelClass.isAssignableFrom(AddViewModel::class.java)) {
            @Suppress("UNCHECKED_CAST")
            return AddViewModel(repository) as T
        }
        throw IllegalArgumentException("Unknown ViewModel class")
    }

}
